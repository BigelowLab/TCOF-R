[
  {
    "objectID": "many-files.html",
    "href": "many-files.html",
    "title": "Many files",
    "section": "",
    "text": "It can be a challenge to face many files to work with. Often they are scattered across a number of directories, and it can be tempting for a novice to manually read each one. This is a moment to leverage the fast and relatively easy tools available to you for finding, reading and binding various data sets.\nWorse, sometimes files can less than cooperative for new coders by having complicated or non-standard layouts.\nAnd, of course, invariably we want do handle the contents of the files as one object, rather than one object per file.\nIn this tutorial we walk through some of the techniques available to the coder to simplify the steps to importing multi-file datasets into R (or python!)",
    "crumbs": [
      "E pluribus unum"
    ]
  },
  {
    "objectID": "many-files.html#mocked-data",
    "href": "many-files.html#mocked-data",
    "title": "Many files",
    "section": "Mocked data",
    "text": "Mocked data\nWe have prepared a mock up of a dataset. It consists of studies of guppies from 5 sites. At each site we generate two files: a “gup” data file and a “YAML” metadata file. Each is a text file, but the .gup file consists of two parts: a header is a quasi-yaml format followed by the a CSV style table of data.",
    "crumbs": [
      "E pluribus unum"
    ]
  },
  {
    "objectID": "many-files.html#finding-files",
    "href": "many-files.html#finding-files",
    "title": "Many files",
    "section": "Finding files",
    "text": "Finding files\nR-language provides convenient tools for locating files. If you find these don’t suit your needs, then consider using the fs R package. For this project, we’ll stick to using base R functionality as much as possible.\nHere we use the list_guppy() function. Here’s what it finds…\n\nsource(\"setup.R\")\n\nhere() starts at /Users/ben/Library/CloudStorage/Dropbox/code/projects/TCOF-R\n\ngup_files = list_guppy() |&gt;\n  print()\n\n[1] \"/Users/ben/Library/CloudStorage/Dropbox/code/projects/TCOF-R/data/guppy/site_01/site_01.gup\"\n[2] \"/Users/ben/Library/CloudStorage/Dropbox/code/projects/TCOF-R/data/guppy/site_02/site_02.gup\"\n[3] \"/Users/ben/Library/CloudStorage/Dropbox/code/projects/TCOF-R/data/guppy/site_03/site_03.gup\"\n[4] \"/Users/ben/Library/CloudStorage/Dropbox/code/projects/TCOF-R/data/guppy/site_04/site_04.gup\"\n[5] \"/Users/ben/Library/CloudStorage/Dropbox/code/projects/TCOF-R/data/guppy/site_05/site_05.gup\"\n\n\nLet’s take a closer look. The built-in list.files() function is the workhorse here.\nlist_guppy = function(path = here::here(\"data\", \"guppy\"),\n                        pattern = glob2rx(\"*.gup\"),\n                        recursive = TRUE){\n  list.files(path, pattern = pattern, recursive= TRUE, full.names = TRUE)\n}\n\npath this is a string providing the pathway to the data files\npattern this is regular expression. We converted a “glob” (wildcard notation) to a “regex” (regular expression) using the handy glob2rx() function where we requested the pattern of “any characters followed by ‘.R’ at the very end”.\nrecursive tells list.files() to search deeply into subdirectories of path.\nfull.names results in fully formed filenames including the path.",
    "crumbs": [
      "E pluribus unum"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Tandy Center for Ocean Forecasting",
    "crumbs": [
      "Home"
    ]
  }
]